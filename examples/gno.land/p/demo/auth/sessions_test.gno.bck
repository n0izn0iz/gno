package auth_test

import (
	"std"
	"testing"

	"gno.land/p/demo/auth"
	"gno.land/p/demo/testutils"
	"gno.land/p/demo/urequire"
	"gno.land/r/demo/callerauth"
)

// TODO: more extensive tests

func TestSessions(t *testing.T) {
	aliceAddr := testutils.TestAddress("alice")
	aliceRealm := std.NewUserRealm(aliceAddr)
	aliceEntityID := callerauth.EntityID(aliceAddr)

	bobAddr := testutils.TestAddress("bob")
	bobRealm := std.NewUserRealm(bobAddr)
	bobEntityID := callerauth.EntityID(bobAddr)

	// no session created
	{
		std.TestSetRealm(bobRealm)

		autok := AuthToken(callerauth.AuthToken(), aliceEntityID)
		urequire.PanicsWithMessage(t, auth.ErrInvalidToken.Error(), func() {
			Authenticate(autok)
		})
	}

	// happy path
	{
		std.TestSetRealm(aliceRealm)

		Login(callerauth.AuthToken(), bobEntityID, NoExpiry)

		std.TestSetRealm(bobRealm)

		autok := AuthToken(callerauth.AuthToken(), aliceEntityID)

		entityID := Authenticate(autok)
		urequire.Equal(t, aliceEntityID, entityID)

		LogoutFromSession(callerauth.AuthToken(), aliceEntityID)

		urequire.PanicsWithMessage(t, auth.ErrInvalidToken.Error(), func() {
			Authenticate(autok)
		})
	}
}
